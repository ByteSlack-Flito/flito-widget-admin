import {
  Avatar,
  Badge,
  Box,
  Button,
  Divider,
  HStack,
  IconButton,
  Input,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  Radio,
  RadioGroup,
  Spacer,
  Table,
  TableContainer,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  VStack
} from '@chakra-ui/react'
import React, { useEffect, useImperativeHandle, useRef, useState } from 'react'
import validator from 'validator'
import { BiX } from 'react-icons/bi'

import DropDown from 'react-dropdown'
import 'react-dropdown/style.css'
import {
  updateProfile,
  useProfile,
  useWidget
} from '../../../data/database/users/profile'
import { useSelector } from 'react-redux'
import { useToastGenerator } from '../../../components/global'
import { arrayUnion } from 'firebase/firestore'

const Roles = [
  'Front-End Developer',
  'Back-End Developer',
  'QA Tester',
  'DevOps Engineer',
  'Project Manager',
  'UI Designer'
]

const EmploymentTypes = ['Full-Time (> 30hrs/week)', 'Part-Time (< 30hrs/week)']

const SalaryTypes = ['Yearly', 'Hourly']

export const AddMemberModal = React.forwardRef(({ onSuccessClose }, ref) => {
  const [isOpen, setIsOpen] = useState(false)
  const [inviteeList, setInviteeList] = useState([])
  const nameInputRef = useRef()
  const { update, isUpdating } = useProfile()
  const toast = useToastGenerator()

  function open () {
    setIsOpen(true)
  }

  useImperativeHandle(ref, () => ({
    open
  }))

  function addMemberToList (key) {
    const name = nameInputRef.current.value
    if (key === 'Enter') {
      if (!inviteeList.some(x => x.name === name))
        setInviteeList(prev => [
          ...prev,
          {
            name
          }
        ])
    }
  }

  function removeInvitee (index) {
    let invitees = [...inviteeList]
    invitees.splice(index, 1)
    setInviteeList(invitees)
  }

  useEffect(() => {
    if (nameInputRef.current) nameInputRef.current.value = ''
  }, [inviteeList?.length])

  function updateInvitee ({ key, nestedKey, val, inviteeName }) {
    setInviteeList(prev => {
      let spread = [...prev]
      const updIndex = inviteeList.findIndex(x => x.name === inviteeName)
      if (nestedKey) {
        if (!spread[updIndex][key]) {
          spread[updIndex][key] = {}
        }

        spread[updIndex][key][nestedKey] = val
      } else {
        spread[updIndex][key] = val
      }
      return spread
    })
  }

  async function performUpdate () {
    // console.log('Result:', inviteeList)
    const result = await update({team: arrayUnion(...inviteeList)})
    toast.show(result)
    if (result.success) {
      setIsOpen(false)
      onSuccessClose()
    }
  }

  return (
    <Modal
      onClose={() => setIsOpen(false)}
      isOpen={isOpen}
      size={'5xl'}
      motionPreset='slideInBottom'
      onCloseComplete={() => setInviteeList([])}
    >
      <ModalOverlay />
      <ModalContent>
        <ModalHeader
          bg='gray.50'
          display='flex'
          justifyContent='space-between'
          alignItems='center'
        >
          <Text w='max-content' fontSize='medium'>
            Add New Members
          </Text>
        </ModalHeader>
        <ModalCloseButton mt='1' />
        <ModalBody pt='5' pb='5'>
          <VStack spacing='1' align='flex-start'>
            <Text fontSize='sm'>
              Add your team members to your Flito organization account. You can
              assign roles to each member.
            </Text>
            <Text fontSize='sm' pb='3'>
              Your team members' salary affects{' '}
              <b>
                <i>quotations generated by the widget,</i>
              </b>{' '}
              if you set your pricing strategy as{' '}
              <b>
                <i>Horuly</i>
              </b>
            </Text>
            <Input
              ref={nameInputRef}
              placeholder="Enter member's full name & hit ENTER â†µ"
              size='sm'
              maxW='350px'
              onKeyDown={e => addMemberToList(e.key)}
            />
          </VStack>
          {inviteeList?.length > 0 && (
            <TableContainer
              w='100%'
              // overflowY='scroll !important'
              maxH='500px'
              borderWidth='1px'
              borderColor='blue.100'
              borderRadius='md'
              mt='3'
              pos='relative'
              className='custom-table'
            >
              <Table size='sm'>
                <Thead bg='gray.100'>
                  <Tr>
                    <Th>Name</Th>
                    <Th>Role</Th>
                    <Th>Employment Type</Th>
                    <Th>Salary Type</Th>
                    <Th></Th>
                  </Tr>
                </Thead>
                <Tbody fontWeight='normal'>
                  {inviteeList?.map((invitee, index) => (
                    <Tr
                      _hover={{
                        bg: 'gray.50'
                      }}
                      key={index}
                    >
                      <Td>
                        <Text fontSize='smaller' fontWeight='medium'>
                          {invitee.name}
                        </Text>
                      </Td>
                      <Td maxW='140px'>
                        <DropDown
                          menuClassName='custom-dropdown'
                          options={Roles}
                          placeholder='Select ...'
                          onChange={e =>
                            updateInvitee({
                              key: 'role',
                              val: e.value,
                              inviteeName: invitee.name
                            })
                          }
                        />
                      </Td>
                      <Td maxW='160px'>
                        <DropDown
                          menuClassName='custom-dropdown'
                          options={EmploymentTypes}
                          placeholder='Select ...'
                          onChange={e =>
                            updateInvitee({
                              key: 'employmentType',
                              val: e.value,
                              inviteeName: invitee.name
                            })
                          }
                        />
                      </Td>
                      <Td maxW='200px'>
                        <HStack>
                          <DropDown
                            menuClassName='custom-dropdown'
                            options={SalaryTypes}
                            placeholder='Select ...'
                            onChange={e =>
                              updateInvitee({
                                key: 'salary',
                                nestedKey: 'type',
                                val: e.value,
                                inviteeName: invitee.name
                              })
                            }
                          />
                          <Input
                            size='sm'
                            placeholder='Amount'
                            onChange={e =>
                              updateInvitee({
                                key: 'salary',
                                nestedKey: 'rate',
                                val: e.target.value,
                                inviteeName: invitee.name
                              })
                            }
                          />
                        </HStack>
                      </Td>
                      <Td textAlign='right'>
                        <IconButton
                          size='xs'
                          icon={<BiX size={16} />}
                          colorScheme='gray'
                          variant='solid'
                          onClick={() => removeInvitee(index)}
                        />
                      </Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </TableContainer>
          )}
        </ModalBody>
        <Divider />
        <ModalFooter bg='gray.50'>
          <Button
            size='sm'
            colorScheme='blue'
            isDisabled={inviteeList?.length <= 0}
            onClick={performUpdate}
            isLoading={isUpdating}
          >
            Add Members
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  )
})
